geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
episodes = st_read("data/episodes.csv", crs=4326)
appearances = st_read("data/appearances.csv", crs=4326)
characters = st_read("data/characters.csv", crs=4326)
populations = st_read("data/populations.csv", crs=4326)
scenes = st_read("data/scenes.csv", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map +
geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
?st_read
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/map_got.R')
runApp('GOT_App')
plot(my_gg)
runApp('GOT_App')
View(scenes)
View(episodes)
View(characters)
runApp('GOT_App')
View(characters)
a=characters[characters$name=="Gared"]
a=characters[characters$name=="Gared",]
a
View(a)
a$killedBy==NA
if (a$killedBy=="NA"){return("TRUE")}
if (a$killedBy==NA){return("TRUE")}
if (a$killedBy==NA){return(TRUE)}
if (a$killedBy==NA){print(TRUE)}
is.na(a$killedBy)
View(episodes)
View(scenes)
View(appearances)
View(populations)
runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
#lieuMort : fonction qui prend la saison, l'épisode et renvoie la liste des lieux où il y'a eu des morts
lieuMort <- function(theSaison, theEpisode){
elt = scenes[scenes$nbdeath>0] #on garde les
elt = elt[elt$seasonNum==theEpisode,] #filtrer par la saison
elt = elt[elt$episodeId==theSaison,] %>% group_by(location) #filtrer par l'épisode et nom du caractère
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il a visité chaque location (times)
return(elt)
}
c
View(c)
#lieuMort : fonction qui prend la saison, l'épisode et renvoie la liste des lieux où il y'a eu des morts
lieuMort <- function(theSaison, theEpisode){
elt = scenes[scenes$nbdeath>0, scenes$seasonNum==theSaison, scenes$episodeId==theEpisode] %>% group_by(location) #on garde les
#elt = elt[elt$seasonNum==theEpisode,] #filtrer par la saison
#elt = elt[elt$episodeId==theSaison,] %>% group_by(location) #filtrer par l'épisode et nom du caractère
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il a visité chaque location (times)
return(elt)
}
#exemple
c=lieuMort(1,1)
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
#lieuMort : fonction qui prend la saison, l'épisode et renvoie la liste des lieux où il y'a eu des morts
lieuMort <- function(theSaison, theEpisode){
elt = scenes[scenes$nbdeath>0,] #on garde les
elt = elt[elt$seasonNum==theEpisode,] #filtrer par la saison
elt = elt[elt$episodeId==theSaison,] %>% group_by(location) #filtrer par l'épisode et nom du caractère
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il a visité chaque location (times)
return(elt)
}
#exemple
c=lieuMort(1,1)
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
View(episodes)
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
View(c)
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
View(c)
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
View(c)
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
View(c)
runApp('GOT_App')
View(scenesLocations)
View(theData)
View(c)
elt = scenesLocations %>% inner_join(c)
View(elt)
plot(elt)
plot(geom_sf(data=elt, fill="red", color="red"))
runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/Fonction Death.R', encoding = 'UTF-8')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/Fonction Death.R', encoding = 'UTF-8')
a=death(1,1)
View(a)
plot(my_gg)
plot(map)
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
plot(map)
runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
plot(displayMap2())
runApp('GOT_App')
runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
runApp('GOT_App')
shiny::runApp('GOT_App')
a=read_file("www/a-propos_.html")
rawHTML = paste(readLines("www/a-propos_.html"), collapse="\n")
rawHTML = paste(readLines("GoT_App/www/a-propos_.html"), collapse="\n")
rawHTML = paste(readLines("www/a-propos_.html"), collapse="\n")
rawHTML = paste(readLines("GoT_App/www/a-propos_.html"), collapse="\n")
a=read_file("www/a-propos_.html")
rawHTML = paste(readLines("GoT_App/www/a-propos.txt"), collapse="\n")
a=read_file("www/a-propos.txt")
rawHTML = paste(readLines("GoT_App/www/a-propos_.html"), collapse="\n")
View(rawHTML)
a=readLines("GoT_App/www/a-propos_.html" ,encoding="utf8")
shiny::runApp('GOT_App')
shiny::runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
return(map)
}
plot(displayMap2())
source('E:/_Ghost/3A/Visualisation de données/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
runApp('GOT_App')
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
return(map)
}
View(displayMap2())
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
#displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
#return(map)
#}
#View(displayMap2())
?ggiraph
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
return(map)
}
ggiraph(code = print(displayMap2()))
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
#ggiraph(code = print(map))
return(map)
}
ggiraph(code = print(displayMap2()))
View(ggiraph(code = print(displayMap2())))
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
#ggiraph(code = print(map))
return(map)
}
ggiraph(code = print(displayMap2()))
runApp('GOT_App')
