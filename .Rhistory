map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
return(map)
}
plot(displayMap2())
source('E:/_Ghost/3A/Visualisation de donn√©es/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got__.R')
runApp('GOT_App')
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
return(map)
}
View(displayMap2())
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
#displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
#return(map)
#}
#View(displayMap2())
?ggiraph
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
ggiraph(code = print(map))
return(map)
}
ggiraph(code = print(displayMap2()))
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
montains = landscape %>%  filter(type=="montain")
forests = landscape %>%  filter(type=="forest")
swamp = landscape %>%  filter(type=="swamp")
stepp = landscape %>%  filter(type=="stepp")
map = ggplot()+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")
map=ggplot(locations)+geom_sf(data=continents$geometry,fill="ivory",color="ivory3")+
geom_sf(data = islands$geometry, fill="ivory",color="ivory3") +
geom_sf(data = forests$geometry, fill="green",color="ivory")+
geom_sf(data = montains$geometry, fill="#CCCCCC",color="ivory")+
geom_sf(data = swamp$geometry, fill="#669999",color="ivory")+
geom_sf(data = stepp$geometry, fill="#669933",color="ivory")+
geom_sf(data = lakes$geometry, fill="#33CCFF",color="black")+
geom_sf(data = rivers$geometry, fill="#00CCFF",color="blue")+
geom_sf(data = roads$geometry, fill="#666666",color="#666666")
mapLocation = map + geom_sf(data = locations$geometry, fill="#FFCCCC",color="#FFCCCC")
my_gg <- mapLocation + geom_sf_interactive(aes(tooltip = name), size = 2)
ggiraph(code = print(my_gg))
locations = locations %>% relocate(type, .after = name)
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
#ggiraph(code = print(map))
return(map)
}
ggiraph(code = print(displayMap2()))
View(ggiraph(code = print(displayMap2())))
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
continents = st_read("data/GoTRelease/Continents.shp", crs=4326)
islands = st_read("data/GoTRelease/Islands.shp", crs=4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs=4326)
land = st_read("data/GoTRelease/Land.shp", crs=4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs=4326)
locations = st_read("data/GoTRelease/Locations.shp", crs=4326)
political = st_read("data/GoTRelease/Political.shp", crs=4326)
regions = st_read("data/GoTRelease/Regions.shp", crs=4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs=4326)
roads = st_read("data/GoTRelease/Roads.shp", crs=4326)
scenesLocations = st_read("data/GoTRelease/ScenesLocations.shp", crs=4326)
wall = st_read("data/GoTRelease/Wall.shp",crs=4326)
displayMap2 <- function(){
continentType = data.frame ("type" = rep("continent", length(continents$id)))
islandType = data.frame("type" = rep("island", length(islands$id)))
lakesType = data.frame("type" = rep("lakes", length(lakes$id)))
riverType = data.frame("type" = rep("rivers", length(rivers$id)))
roadsType = data.frame("type" = rep("roads", length(roads$id)))
wallType = data.frame("type" = rep("wall", length(wall$id)))
policalType = data.frame("type" = rep("political", length(political$id)))
allDatas = bind_rows(bind_cols(continents, continentType),
bind_cols(islands, islandType),
landscape,
bind_cols(rivers, riverType),
bind_cols(lakes, lakesType),
bind_cols(roads, roadsType),
bind_cols(wall, wallType),
locations
)
spaces = c("continent","forest","mountain","stepp","swamp","lakes","rivers","roads","islands","Castle","city","Other","Ruin","Town","wall","political","desert","land","shore","water")
cols = c("ivory","green","#gray88","#669933","#669999","blue","#00CCFF","gray0","lightgoldenrod1","red","black","lightskyblue4","slategray4","lightyellow1","#CCCCCC","orangered3","orange3","moccasin","royalblue","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
map = ggplot(allDatas) + geom_sf(aes(fill=type), size = 0.1) + geom_sf(data = locations, fill="black", color = "black") + geom_sf_interactive(data=locations, aes(tooltip = name), size = 2)
#ggiraph(code = print(map))
return(map)
}
ggiraph(code = print(displayMap2()))
runApp('GOT_App')
shiny::runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de donn√©es/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got.R')
runApp('GOT_App')
source('E:/_Ghost/3A/Visualisation de donn√©es/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got.R')
source('E:/_Ghost/3A/Visualisation de donn√©es/Projet-visualisation-Centrale-Casablanca__/develop_branch/map_got.R')
plot(displayMap())
View(displayMap())
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
library(roxygen2)
#' import de la base de donn?es
continents = st_read("data/GoTRelease/Continents.shp", crs = 4326)
islands = st_read("data/GoTRelease/Islands.shp", crs = 4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs = 4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs = 4326)
locations = st_read("data/GoTRelease/Locations.shp", crs = 4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs = 4326)
roads = st_read("data/GoTRelease/Roads.shp", crs = 4326)
wall = st_read("data/GoTRelease/Wall.shp", crs = 4326)
#' creation d'une dataframe contenant toutes les datas utiles.
#' Pour pouvoir reconnaitre les differentes datas, ajout de l'attribut type
continents$type="continent"
islands$type="island"
lakes$type="lake"
rivers$type="river"
roads$type="road"
wall$type="wall"
allDatas = bind_rows( continents,islands, landscape, rivers,lakes,roads,wall)
spaces = c(
"continent",
"forest",
"mountain",
"stepp",
"swamp",
"lake",
"river",
"road",
"island",
"location",
"wall",
"political",
"desert",
"land",
"shore",
"water"
)
cols = c(
"ivory",
"green",
"gray88",
"#669933",
"cyan4",
"blue",
"cyan3",
"gray1",
"gold",
"black",
"gold4",
"orangered3",
"darkgoldenrod1",
"gray",
"yellow",
"#33CCFF"
)
names(cols) = spaces
levels(allDatas$type) = spaces
#'\code{displayMap} Consruire la map de got en fonction
#'@param layerGeometry la couche donc la g?ometrie sera ajout?e et
#'@param layerCol pour fixer la couleur de la couche
#'@param layerFill pour fixer la couleur du remplissage
#'@return une novelle map
displayMap = function(layerGeometry=NA, layerCol="red", layerFill="red") {
map = ggplot(allDatas) + geom_sf(aes(fill = type), size = 0.1) +
geom_sf(data = locations,fill = "black",color = "black") +
scale_fill_manual("Lands category", values = cols) +
theme_minimal() +
geom_sf_interactive(data = locations, aes(tooltip = name), size = 2) +
geom_sf_text(
data = allDatas %>% filter(type == "continent"),
aes(label = name),
color = "red",
fontface = "bold"
)
if(!is.na(layerGeometry)){map = map + geom_sf(data = layerGeometry,
fill= layerFill,
color = layerCol) }
return(map)
}
ggiraph(code = print(displayMap()))
library(sf)
library(ggplot2)
library(dplyr)
library(ggiraph)
library(roxygen2)
#' import de la base de donn?es
continents = st_read("data/GoTRelease/Continents.shp", crs = 4326)
islands = st_read("data/GoTRelease/Islands.shp", crs = 4326)
lakes = st_read("data/GoTRelease/Lakes.shp", crs = 4326)
landscape = st_read("data/GoTRelease/Landscape.shp", crs = 4326)
locations = st_read("data/GoTRelease/Locations.shp", crs = 4326)
rivers = st_read("data/GoTRelease/Rivers.shp", crs = 4326)
roads = st_read("data/GoTRelease/Roads.shp", crs = 4326)
wall = st_read("data/GoTRelease/Wall.shp", crs = 4326)
displayMap = function(layerGeometry=NA, layerCol="red", layerFill="red") {
#' creation d'une dataframe contenant toutes les datas utiles.
#' Pour pouvoir reconnaitre les differentes datas, ajout de l'attribut type
continents$type="continent"
islands$type="island"
lakes$type="lake"
rivers$type="river"
roads$type="road"
wall$type="wall"
allDatas = bind_rows( continents,islands, landscape, rivers,lakes,roads,wall)
spaces = c("continent","forest","mountain","stepp","swamp","lake","river","road","island","location","wall","political","desert","land","shore","water")
cols = c("ivory","green","gray88","#669933","cyan4","blue","cyan3","gray1","gold","black","gold4","orangered3","darkgoldenrod1","gray","yellow","#33CCFF")
names(cols) = spaces
levels(allDatas$type) = spaces
#'\code{displayMap} Consruire la map de got en fonction
#'@param layerGeometry la couche donc la g?ometrie sera ajout?e et
#'@param layerCol pour fixer la couleur de la couche
#'@param layerFill pour fixer la couleur du remplissage
#'@return une novelle map
map = ggplot(allDatas) + geom_sf(aes(fill = type), size = 0.1) +
geom_sf(data = locations,fill = "black",color = "black") +
scale_fill_manual("Lands category", values = cols) +
theme_minimal() +
geom_sf_interactive(data = locations, aes(tooltip = name), size = 2) +
geom_sf_text(
data = allDatas %>% filter(type == "continent"),
aes(label = name),
color = "red",
fontface = "bold"
)
if(!is.na(layerGeometry)){map = map + geom_sf(data = layerGeometry,
fill= layerFill,
color = layerCol) }
return(map)
}
ggiraph(code = print(displayMap()))
shiny::runApp('GOT_App')
View(scenes)
View(episodes)
View(scenes %>% inner_join(episodes))
View(episodes)
View(elt[elt$seasonNum==theSaison,] %>% filter(elt$episodeNum==theEpisode) %>% group_by(location) %>% summarise(times=n()))
a=elt[elt$seasonNum==1,] %>% filter(elt$episodeNum==1) %>% group_by(location)
View(a)
View(lieuScene)
#fonction qui prend la saison et l'√©pisode et renvoie les lieux o√π les sc√®nes ont √©t√© tourn√©es
lieuScene <- function(theSaison, theEpisode){
elt = scenes %>% inner_join(episodes)
elt = elt[elt$seasonNum==theSaison,] %>% filter(elt$episodeNum==theEpisode) %>% group_by(location)  #filtrer par la saison et l'√©pisode
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il a visit√© chaque location (times)
return(elt)
}
View(lieuScene)
source('E:/_Ghost/3A/Visualisation de donn√©es/Projet-visualisation-Centrale-Casablanca__/develop_branch/fonction__qui_affiche_les_locations_visites_par_le_caractere.R', encoding = 'UTF-8')
View(lieuScene(1,1))
#fonction qui prend la saison et l'√©pisode et renvoie les lieux o√π les sc√®nes ont √©t√© tourn√©es
lieuScene <- function(theSaison, theEpisode){
elt = scenes %>% inner_join(episodes)
elt = elt[elt$seasonNum==theSaison,]
elt = elt[elt$episodeNum==theEpisode,] %>% group_by(elt$location)
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il a visit√© chaque location (times)
return(elt)
}
View(lieuScene(1,1))
a=scenes %>% inner_join(episodes)
a= a[a$seasonNum==1,]
a = a[a$episodeNum==1,] %>% group_by(a$location)
a = a[a$episodeNum==1,] %>% group_by(location)
View(a)
a = a[a$episodeNum==1,] %>% group_by(location) %>% summarise(times=n())
#fonction qui prend la saison et l'√©pisode et renvoie les lieux o√π les sc√®nes ont √©t√© tourn√©es
lieuScene <- function(theSaison, theEpisode){
elt = scenes %>% inner_join(episodes)
elt = elt[elt$seasonNum==theSaison,]
elt = elt[elt$episodeNum==theEpisode,] %>% group_by(location) %>% summarise(times=n()) #times est le nbr de fois que location apparait
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il y a eu des sc√®nes dans ce lieu (times)
return(elt)
}
a=lieuScene(2,2)
View(a)
runApp('GOT_App')
