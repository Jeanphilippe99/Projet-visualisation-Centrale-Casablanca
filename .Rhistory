"water"
)
cols = c(
"ivory",
"green",
"gray88",
"#669933",
"cyan4",
"blue",
"cyan3",
"darkgray",
"gold",
"black",
"gold4",
"orangered3",
"darkgoldenrod1",
"gray",
"yellow",
"#33CCFF"
)
names(cols) = spaces
levels(allDatas$type) = spaces
#'\code{displayMap} Consruire la map de got en fonction
#'@param layerGeometry la couche donc la géometrie sera ajoutée et
#'@param layerCol pour fixer la couleur de la couche
#'@param layerFill pour fixer la couleur du remplissage
#'@return une novelle map
displayMap = function(layerGeometry=NA, layerCol="red", layerFill="red") {
map = ggplot(allDatas) + geom_sf(aes(fill = type), size = 0.1) +
geom_sf(data = locations,fill = "black",color = "black") +
scale_fill_manual("Lands category", values = cols) +
theme_minimal() +
geom_sf_interactive(data = locations, aes(tooltip = name), size = 2) +
geom_sf_text(
data = allDatas %>% filter(type == "continent"),
aes(label = name),
color = "red",
fontface = "bold"
)
if(!is.na(layerGeometry)){map = map + geom_sf(data = layerGeometry,
fill= layerFill,
color = layerCol) }
return (map)
}
displayMap()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
source("importFilesAndDatas.R")
#' getSeason est une fonction qui retourne les Ã©pisodes de la saison avec x
#' comme paramÃ¨tre correspondant Ã la saison en questio
getSeason<-function(x){
A<-episodes[episodes$seasonNum==x,]
liste_episodes<-A$episodeNum
liste_Id<-A$episodeId
return (as.data.frame(A))
}
getSeason(3)$episodeTitle
#retourne les Ã©pisodes
#Ã©pisode est une fonction qui retourne la liste des acteurs avec
epi<-function(x,y){
D<-getSeason(x)
D<-D[D$episodeNum==y,]
D<-D$episodeId
liste_scenes<-lapply(D,function(z){B<-scenes[scenes$episodeId==z,]
B<-B$sceneId}
)
liste_scenes<-unlist(liste_scenes)
liste_acteurs<-lapply(liste_scenes,function(e){T<-appearances[appearances$sceneId==e,]
T<-T$name   })
liste_acteurs<-unique(unlist(liste_acteurs))
return(liste_acteurs)
}
a<-epi(3,4)
source("importFilesAndDatas.R")
#' getSeason est une fonction qui retourne les Ã©pisodes de la saison avec x
#' comme paramÃ¨tre correspondant Ã la saison en questio
getSeason<-function(x){
A<-episodes[episodes$seasonNum==x,]
liste_episodes<-A$episodeNum
liste_Id<-A$episodeId
return (as.data.frame(A))
}
getSeason(3)$episodeTitle
#retourne les Ã©pisodes
#Ã©pisode est une fonction qui retourne la liste des acteurs avec
epi<-function(x,y){
D<-getSeason(x)
D<-D[D$episodeNum==y,]
D<-D$episodeId
liste_scenes<-lapply(D,function(z){B<-scenes[scenes$episodeId==z,]
B<-B$sceneId}
)
liste_scenes<-unlist(liste_scenes)
liste_acteurs<-lapply(liste_scenes,function(e){T<-appearances[appearances$sceneId==e,]
T<-T$name   })
liste_acteurs<-unique(unlist(liste_acteurs))
return(liste_acteurs)
}
a<-epi(3,4)
a
getSeasons <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
liste_episodes <- A$episodeNum
liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
getSeason(3)$episodeTitle
getSeason(3)
source("importFilesAndDatas.R")
#' getSeasons est une fonction qui retourne les Ã©pisodes de la saison avec numSeas
#' comme paramÃ¨tre correspondant Ã la saison en questio
getSeasons <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
liste_episodes <- A$episodeNum
liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#getSeason(3)$episodeTitle
#retourne les Ã©pisodes
#Ã©pisode est une fonction qui retourne la liste des acteurs avec
getCharacters <- function(x, y) {
D <- getSeasons(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <- lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <-
T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
getCharacters <- epi(3, 4)
getCharacters(3,4)
getCharacters <- function(x, y) {
D <- getSeasons(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <- lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <-
T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
getCharacters(3,4)
getCharacters(1,1)
getSeasons(3)
a = getSeasons(3)
a$idAndTitle = a$episodeNum + a$episodeTitle
a$idAndTitle = as.string(a$episodeNum) + a$episodeTitle
a$idAndTitle = as.character(a$episodeNum) + a$episodeTitle
a$idAndTitle = paste(a$episodeNum,a$episodeTitle,sep=" ")
a
rm(list=ls())
source("importFilesAndDatas.R")
#' getSeason est une fonction qui retourne les Ã©pisodes de la saison avec numSeas
#' comme paramÃ¨tre correspondant Ã la saison en questio
getSeason <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
#A$idAndTitle = past(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#getSeason(3)$episodeTitle
#'\code{getCharacters} '@return list of characters in episode according
#'@param numseas season number and
#'@param numEpisode episode number
getCharacters <- function(numSeas, numEpisode) {
D <- getSeason(numSeas)
D <- D[D$episodeNum == numEpisode, ]
D <- D$episodeId
liste_scenes <- lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <-T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
getCharacters <- epi(3, 4)
getCharacters(3, 4)
runApp()
runApp()
setwd("~/Année d'Ing/3A Généraliste/visualisation des données/Projet-visualisation-Centrale-Casablanca")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("importFilesAndDatas.R")
#' getEpisodes est une fonction qui retourne les Ã©pisodes de la saison avec numSeas
#' comme paramÃ¨tre correspondant Ã la saison en questio
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
#A$idAndTitle = past(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#'\code{getCharacters} '@return list of characters in episode according
#'@param numseas season number and
#'@param numEpisode episode number
getCharacters <- function(x, y) {
D <- getEpisodes(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <-
lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <- T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
#getCharacters(3, 4)
getCharacters(3, 4)
runApp()
source("importFilesAndDatas.R")
#' getEpisodes est une fonction qui retourne les Ã©pisodes de la saison avec numSeas
#' comme paramÃ¨tre correspondant Ã la saison en questio
episodes$idAndTitle = past(episodes$episodeNum, episodes$episodeTitle, sep=" ")
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#'\code{getCharacters} '@return list of characters in episode according
#'@param numseas season number and
#'@param numEpisode episode number
getCharacters <- function(x, y) {
D <- getEpisodes(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <-
lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <- T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
#getCharacters(3, 4)
episodes$idAndTitle = past(episodes$episodeNum, episodes$episodeTitle, sep=" ")
source("importFilesAndDatas.R")
episodes$idAndTitle = past(episodes$episodeNum, episodes$episodeTitle, sep=" ")
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
A$idAndTitle = past(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
a=getEpisodes(4)
rm(list=ls())
source("importFilesAndDatas.R")
#' getEpisodes est une fonction qui retourne les Ã©pisodes de la saison avec numSeas
#' comme paramÃ¨tre correspondant Ã la saison en questio
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
A$idAndTitle = past(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#'\code{getCharacters} '@return list of characters in episode according
#'@param numseas season number and
#'@param numEpisode episode number
getCharacters <- function(x, y) {
D <- getEpisodes(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <-
lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <- T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
#getCharacters(3, 4)
getEpisodes(2)
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
A$idAndTitle <- past(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
getEpisodes(2)
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
A$idAndTitle <- past(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#'\code{getCharacters} '@return list of characters in episode according
#'@param numseas season number and
#'@param numEpisode episode number
getCharacters <- function(x, y) {
D <- getEpisodes(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <-
lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <- T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
getEpisodes(2)
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
A$idAndTitle <- paste(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#'\code{getCharacters} '@return list of characters in episode according
#'@param numseas season number and
#'@param numEpisode episode number
getCharacters <- function(x, y) {
D <- getEpisodes(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <-
lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <- T$name
})
)
source("importFilesAndDatas.R")
#' getEpisodes est une fonction qui retourne les Ã©pisodes de la saison avec numSeas
#' comme paramÃ¨tre correspondant Ã la saison en questio
getEpisodes <- function(numSeas) {
A <- episodes[episodes$seasonNum == numSeas, ]
A$idAndTitle <- paste(A$episodeNum, A$episodeTitle, sep=" ")
#liste_episodes <- A$episodeNum
#liste_Id <- A$episodeId
#return (as.data.frame(A))
return (A)
}
#'\code{getCharacters} '@return list of characters in episode according
#'@param numseas season number and
#'@param numEpisode episode number
getCharacters <- function(x, y) {
D <- getEpisodes(x)
D <- D[D$episodeNum == y, ]
D <- D$episodeId
liste_scenes <-
lapply(D, function(z) {
B <- scenes[scenes$episodeId == z, ]
B <- B$sceneId
})
liste_scenes <- unlist(liste_scenes)
liste_acteurs <-
lapply(liste_scenes, function(e) {
T <- appearances[appearances$sceneId == e, ]
T <- T$name
})
liste_acteurs <- unique(unlist(liste_acteurs))
return(liste_acteurs)
}
#getCharacters(3, 4)
getEpisodes(3)
shiny::runApp()
View(episodes)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
getLocations(1,2)
#Coded by @JosueInitDev and KOUASSI2297
#**************************************************************
#*C'est la seconde fonction******elle utilise la première******
#**************************************************************
source("importFilesAndDatas.R")
#getPathCharacter : fonction qui prend la saison, l'épisode, le caractère et renvoie la liste des lieux visités par celui-ci
getPathCharacter <- function(theSaison, theEpisode, theCaractere) {
elt = scenes %>% inner_join(episodes) %>% inner_join(appearances)
elt = elt[elt$seasonNum == theSaison,] #filtrer par la saison
elt = elt[elt$episodeId == theEpisode,] %>% filter(name == theCaractere) %>% group_by(location) %>% summarise(nbr_scenes = n())
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il a visité chaque location (nbr_scenes)
return(elt)
}
#plotLieux : fonction qui prend une liste de lieux et renvoie la representation en couleurs
plotLieux<-function(theData){
#' theData : tableau contenant les lieux avec le nombre de fois que ce lieu fu
#' visité par un caractere bien precis (resultat de lieuVisite())
A = st_read("data/GoTRelease/ScenesLocations.shp")
elt = A %>% inner_join(theData) #jointure sur location
plot(st_geometry(elt), col=factor(elt$location), cex=elt$times, lwd=5)
}
#' fonction qui prend la saison et l'épisode et renvoie les lieux où
#' les scènes ont été tournées
getLocations <- function(theSaison, theEpisode) {
elt = scenes %>% inner_join(episodes)
elt = elt[elt$seasonNum == theSaison,]
elt = elt[elt$episodeNum == theEpisode,] %>% group_by(location) %>% summarise(nbr_scenes =
n()) #times est le nbr de fois que location apparait
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il y a eu des scènes dans ce lieu (nbr_scenes)
return(elt)
}
#' getDeathLocations : fonction qui prend la saison, l'épisode et renvoie
#' la liste des lieux où il y'a eu des morts
getDeathLocations <- function(theSaison, theEpisode) {
elt = scenes %>% inner_join(episodes)
elt = elt[elt$nbdeath > 0,] #on garde la data où il y'a des morts
elt = elt[elt$seasonNum == theSaison,] #filtrer par la saison
elt = elt[elt$episodeNum == theEpisode,] %>% group_by(location) %>% summarise(morts = n()) #morts=nbr de morts par lieu
#NB : pendant le filtrage, on ne repete pas les locations qui se repetent, mais on compte le nombre de fois qu'il y a eu des morts dans ce lieu au cours de la saison et de l'épisode
return(elt)
}
#exemple
#c=getDeathLocations(1,1)
getLocations(1,2)
shiny::runApp()
runApp()
getLocations(1,2)
runApp()
getDeathLocations(1,2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getDeathLocations(1, 1)
runApp()
View(allDatas)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
